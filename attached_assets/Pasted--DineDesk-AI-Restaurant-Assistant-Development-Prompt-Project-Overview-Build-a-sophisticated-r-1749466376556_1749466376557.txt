# DineDesk - AI Restaurant Assistant Development Prompt

## Project Overview
Build a sophisticated restaurant booking and delivery chatbot interface called **DineDesk** using Flask. The application should provide an intelligent, conversational experience for users to book tables, order food, and interact with restaurant services.

## UI/UX Design Requirements

### Visual Design Philosophy
Create a modern, clean interface inspired by contemporary AI chat applications with these characteristics:

**Color Scheme:**
- Primary background: Clean white (#FFFFFF) or soft light gray (#F8F9FA)
- Secondary background: Light gray (#F1F3F4) for message bubbles
- Accent colors: Warm orange/amber (#FF6B35) for restaurant branding
- Text: Dark gray (#2D3748) for primary text, medium gray (#4A5568) for secondary
- Borders: Subtle light gray (#E2E8F0)

**Typography:**
- Clean, readable sans-serif fonts (Inter, Segoe UI, or system fonts)
- Hierarchical text sizing with good contrast
- Proper line spacing for readability

**Layout & Spacing:**
- Generous white space and padding
- Consistent 8px grid system
- Maximum width container (800-1000px) centered on desktop
- Mobile-first responsive design

### Core UI Components

**1. Header Section:**
- Clean top bar with "DineDesk" branding
- Subtle shadow or border bottom
- Optional user profile/settings icon

**2. Chat Interface:**
- Full-height scrollable message area
- Distinct styling for user vs bot messages:
  - User messages: Right-aligned, colored background
  - Bot messages: Left-aligned, light background with subtle border
- Message timestamps (subtle, small text)
- Typing indicators with animated dots
- Smooth scroll-to-bottom on new messages

**3. Input Area:**
- Fixed bottom position with subtle shadow
- Large text input field with rounded corners
- Send button with icon (paper plane or arrow)
- Microphone button for voice input (with visual feedback)
- File attachment option for images/documents
- Character counter for longer messages

**4. Interactive Elements:**
- Smooth hover transitions (200-300ms)
- Subtle button press animations
- Loading states with skeleton screens or spinners
- Toast notifications for system messages

**5. Restaurant-Specific Features:**
- Menu item cards with images, prices, descriptions
- Calendar/time picker for reservations
- Order summary sidebar or modal
- Rating/review components
- Quick action buttons (popular dishes, time slots)

## Technical Specifications

### Backend (Flask)
```python
# Required dependencies in requirements.txt
Flask==2.3.3
Flask-SocketIO==5.3.6
python-socketio==5.8.0
eventlet==0.33.3
requests==2.31.0
python-dotenv==1.0.0
```

### Key Features to Implement:

**1. Real-time Communication:**
- WebSocket integration using Flask-SocketIO
- Streaming response simulation (typewriter effect)
- Real-time message delivery
- Connection status indicators

**2. Chat Functionality:**
- Message history storage (session-based initially)
- Message threading/conversation context
- Rich message types (text, images, cards, quick replies)
- Typing indicators and read receipts

**3. Restaurant Services Integration:**
- Table booking system with availability checking
- Menu browsing with categories and search
- Order placement and tracking
- User preferences and history
- Location-based restaurant finding

**4. Voice Integration Ready:**
- Frontend UI for voice input button
- Placeholder for speech-to-text integration
- Visual feedback during voice recording
- Audio message playback capability

### Frontend Implementation

**JavaScript Requirements:**
- Modern ES6+ syntax
- Fetch API for HTTP requests
- Socket.IO client for real-time features
- Responsive event handling
- Local storage for user preferences

**CSS Framework:**
- TailwindCSS for utility-first styling
- Custom CSS for specific animations
- CSS Grid/Flexbox for layouts
- CSS variables for theming

## File Structure
```
DineDesk/
├── app.py                 # Main Flask application
├── requirements.txt       # Python dependencies
├── config.py             # Configuration settings
├── .env                  # Environment variables
├── static/
│   ├── css/
│   │   ├── tailwind.css  # TailwindCSS build
│   │   └── custom.css    # Custom styles
│   ├── js/
│   │   ├── main.js       # Core functionality
│   │   ├── chat.js       # Chat-specific features
│   │   └── voice.js      # Voice integration
│   └── images/           # Static images
├── templates/
│   ├── base.html         # Base template
│   ├── index.html        # Main chat interface
│   └── components/       # Reusable components
└── utils/
    ├── __init__.py
    ├── chat_handler.py   # Chat logic
    └── restaurant_api.py # Restaurant services
```

## Detailed Implementation Requirements

### 1. Streaming Response System
Implement a realistic typing effect that simulates AI responses:
- Character-by-character reveal with natural pauses
- Faster typing for simple responses, slower for complex ones
- Cursor blinking effect during typing
- Smooth scrolling as content appears

### 2. Message Types
Support multiple message formats:
- Plain text responses
- Rich cards for menu items/restaurants
- Quick reply buttons for common actions
- Image galleries for food photos
- Interactive forms for booking details

### 3. Conversational Flow
Design intelligent conversation patterns:
- Context awareness between messages
- Natural language understanding simulation
- Helpful suggestions and prompts
- Error handling with friendly messages
- Graceful fallbacks for unsupported requests

### 4. Performance Optimization
- Lazy loading for message history
- Image optimization and caching
- Minimal JavaScript bundle size
- Fast initial page load
- Smooth animations (60fps)

## Sample Conversations to Support

**Table Booking:**
```
User: "I need a table for 4 people tonight"
Bot: "I'd be happy to help you book a table! For tonight, I'm showing availability at several restaurants. What time would you prefer, and do you have any cuisine preferences?"
```

**Food Ordering:**
```
User: "Show me Italian restaurants nearby"
Bot: "Here are the top-rated Italian restaurants in your area: [Restaurant cards with ratings, distance, and quick order buttons]"
```

**Menu Browsing:**
```
User: "What's popular at Mario's Pizza?"
Bot: "Mario's Pizza bestsellers: [Interactive menu cards with images, prices, and 'Add to Cart' buttons]"
```

## Success Criteria
- Responsive design working on mobile and desktop
- Smooth, lag-free chat experience
- Professional, restaurant-industry appropriate UI
- Intuitive navigation and user flow
- Ready for future AI integration
- Clean, maintainable code structure

## Additional Notes
- Focus on user experience over complex backend logic initially
- Use mock data for restaurant information
- Ensure accessibility compliance (ARIA labels, keyboard navigation)
- Implement proper error boundaries and loading states
- Consider internationalization structure for future expansion

Build this as a production-ready prototype that demonstrates the full user experience flow, even with simulated AI responses.